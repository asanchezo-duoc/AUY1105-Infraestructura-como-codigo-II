name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      destroy:
      - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
        TF_VAR_ambiente: dev
      run: |
        echo "Applying Terraform plan..."
        terraform apply tfplan
        echo "Terraform apply completed successfully!"ription: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.13.0"
  WORKING_DIR: "EA1/ACT1.4"

jobs:
  validate:
    name: Validate and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest

    - name: Setup Python for Checkov
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Checkov
      run: |
        pip install checkov

    - name: Install terraform-docs
      run: |
        curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        chmod +x terraform-docs
        sudo mv terraform-docs /usr/local/bin/

    - name: Terraform Format Check
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform validate

    - name: Run TFLint
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        tflint --init
        tflint --format compact

    - name: Run Checkov
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        checkov -f main.tf --framework terraform --check CKV_AZURE_1,CKV_AZURE_2,CKV_AZURE_3 --compact --quiet
      continue-on-error: true

    - name: Generate terraform-docs
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        terraform-docs markdown . > terraform-docs-output.md
        echo "## Terraform Documentation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat terraform-docs-output.md >> $GITHUB_STEP_SUMMARY

    - name: Upload terraform-docs as artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-docs
        path: ${{ env.WORKING_DIR }}/terraform-docs-output.md

  plan-and-apply:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    needs: validate
    environment: dev
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Azure Login with Device Code
      run: |
        echo "Starting Azure login with device code..."
        echo "You will see a code and URL below. Open the URL in your browser and enter the code to authenticate."
        echo ""
        az login --use-device-code
        echo ""
        echo "Azure login successful!"
        az account show --query "{subscriptionId:id, tenantId:tenantId, user:user.name}" --output table

    - name: Create/Select Terraform Workspace
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        terraform init
        WORKSPACE_NAME="dev"
        
        # Check if workspace exists
        if terraform workspace list | grep -q "$WORKSPACE_NAME"; then
          echo "Workspace $WORKSPACE_NAME exists, selecting it"
          terraform workspace select $WORKSPACE_NAME
        else
          echo "Creating new workspace $WORKSPACE_NAME"
          terraform workspace new $WORKSPACE_NAME
        fi
        
        echo "Current workspace: $(terraform workspace show)"

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
        TF_VAR_ambiente: dev
      run: |
        echo "Generating Terraform plan..."
        terraform plan -input=false -out=tfplan
        echo ""
        echo "TERRAFORM PLAN OUTPUT:"
        echo "=========================="
        terraform show -no-color tfplan
        echo "=========================="
        echo ""
        echo "Saving plan for potential apply..."
        terraform show -no-color tfplan > plan_output.txt

    - name: Upload Plan as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: |
          ${{ env.WORKING_DIR }}/tfplan
          ${{ env.WORKING_DIR }}/plan_output.txt

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
        TF_VAR_ambiente: dev
      run: |
        echo "Applying Terraform plan..."
        terraform apply tfplan
        echo "Terraform apply completed successfully!"

    - name: Show Terraform Outputs
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        terraform output -json > outputs.json
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat outputs.json >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Upload Outputs as Artifact
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-dev
        path: ${{ env.WORKING_DIR }}/outputs.json

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    environment: dev
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Azure Login with Device Code
      run: |
        echo "Starting Azure login with device code..."
        echo "You will see a code and URL below. Open the URL in your browser and enter the code to authenticate."
        echo ""
        az login --use-device-code
        echo ""
        echo "Azure login successful!"
        az account show --query "{subscriptionId:id, tenantId:tenantId, user:user.name}" --output table

    - name: Create/Select Terraform Workspace
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        terraform init
        WORKSPACE_NAME="dev"
        
        # Check if workspace exists
        if terraform workspace list | grep -q "$WORKSPACE_NAME"; then
          echo "Workspace $WORKSPACE_NAME exists, selecting it"
          terraform workspace select $WORKSPACE_NAME
        else
          echo "Workspace $WORKSPACE_NAME does not exist. Nothing to destroy."
          exit 0
        fi
        
        echo "Current workspace: $(terraform workspace show)"

    - name: Terraform Destroy
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
        TF_VAR_ambiente: dev
      run: |
        terraform destroy -input=false -auto-approve
